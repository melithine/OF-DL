name: Publish release zip

on:
  push:
    tags:
      - 'OFDLV*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup dotnet 8.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x

      # You can test your matrix by printing the current dotnet version
      - name: Display dotnet version
        run: dotnet --version

      - name: Extract version
        id: version
        run: |
          VERSION="${GITHUB_REF_NAME#OFDLV}"
          echo "Version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Run build
        run: |
          dotnet publish -p Version=${{ steps.version.outputs.version }} --property WarningLevel=0 -c Release -o out
          pwd
          ls -la 
          ls -la ./OF\ DL/
          cp ./OF\ DL/rules.json out/
          # cp ./OF\ DL/config.json out/
          # cp ./OF\ DL/auth.json out/
          cd out
          mkdir -p cdm/devices/chrome_1610
          zip ../OFDLV${{ steps.version.outputs.version }}.zip OF\ DL.exe e_sqlite3.dll *.json cdm
          cd ..

      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: upload Windows zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.version.outputs.version }}.zip
          asset_name: ${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip
